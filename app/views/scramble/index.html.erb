<script src="https://cdn.jsdelivr.net/npm/@shopify/draggable@1.0.0-beta.12/lib/draggable.bundle.js"></script>
<script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js"></script>
<script>
document.addEventListener("turbo:load", () => {
  const solvedRows = new Set();
  let confettiFired = false;

  document.querySelectorAll('.draggable-container').forEach(function(container) {
    const idx = container.getAttribute('data-index');
    const answer = container.getAttribute('data-answer');

    console.log(`Initialising Draggable.Sortable for container index: ${idx}, answer: ${answer}`);

    new Draggable.Sortable(container, {
      draggable: '.letter-tile',
      mirror: {
        constrainDimensions: true,
        appendTo: 'body',
      }
    }).on('sortable:stop', function() {
      const tiles = Array.from(container.querySelectorAll('.letter-tile'))
        .filter(el =>
          !el.classList.contains('draggable-mirror') &&
          !el.classList.contains('draggable--original') &&
          window.getComputedStyle(el).display !== "none"
        );
      console.log("Tiles (filtered):", tiles.map(t => t.textContent));
      const arranged = tiles.map(el => el.dataset.letter).join('');
      console.log(`Row ${idx} sorted, arrangement now: "${arranged}" (Answer: "${answer}")`);

      const messageHeading = document.querySelector('.unscramble-message[data-index="' + idx + '"]');
      const solvedWord = answer.charAt(0).toUpperCase() + answer.slice(1).toLowerCase();
      const solvedText = `ðŸŽ‰ Congratulations! The correct answer is <b>${solvedWord}</b>!`;
      const promptText = "Unscramble this Word:";

      const tile_list = Array.from(container.querySelectorAll('.letter-tile'))
        .filter(el =>
          !el.classList.contains('draggable-mirror') &&
          !el.classList.contains('draggable-source')
        );
            
      if (arranged === answer) {
        tile_list.forEach((t, i) => {
          t.classList.add('solved');
        });
        solvedRows.add(idx);
        messageHeading.innerHTML = solvedText;
      } else {
        tile_list.forEach((t, i) => {
          t.classList.remove('solved');
        });
        solvedRows.delete(idx);
        messageHeading.textContent = promptText;
      }

      const total = document.querySelectorAll('.draggable-container').length;
      console.log(`Currently solved rows: [${Array.from(solvedRows).join(',')}] out of ${total}`);
      // Confetti logic
      if (solvedRows.size === total && !confettiFired) {
        console.log('ALL WORDS SOLVED! Firing confetti!');
        confettiFired = true;
        confetti({
          particleCount: 200,
          spread: 70,
          origin: { y: 0.6 }
        });
      } else if (solvedRows.size < total && confettiFired) {
        console.log('Not all words solved - confetti eligible again if all solved!');
        confettiFired = false;
      }
    });
  });
});
</script>

<style>
.draggable-container {
  display: flex;
  gap: 10px;
  justify-content: center;
  background: #eee;
  padding: 20px;
  border-radius: 8px;
  margin-bottom: 10px;
}

.unscramble-message {
  margin-bottom: 12px;
  min-height: 1.4em;
}

.letter-tile {
  width: 50px;
  height: 50px;
  font-size: 2em;
  background: #ffe6a8;
  border-radius: 8px;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: grab;
  user-select: none;
  transition: background 0.3s;
}

.letter-tile.solved {
  background: #4caf50 !important;
  color: white;
}

.unscramble-game {
  margin-bottom: 40px;
}

.unscramble-done-message {
  margin-top: 10px;
  font-size: 1.1em;
  background: #d4edda;
  padding: 12px;
  border-radius: 5px;
  color: #155724;
}

.letter-tile[data-dragging="true"] {
  background: #ffcf40;
}
</style>


<% @words.each_with_index do |word, idx| %>
  <div class="unscramble-game" data-index="<%= idx %>">
    <h3 class="unscramble-message" data-index="<%= idx %>">
      Unscramble this word:
    </h3>
    <div id="letter-row-<%= idx %>" class="draggable-container" data-index="<%= idx %>" data-answer="<%= word.title.downcase %>">
      <% word.title.downcase.chars.shuffle.each_with_index do |l, i| %>
        <div class="letter-tile" data-letter="<%= l %>" data-index="<%= i %>">
          <%= l %>
        </div>
      <% end %>
    </div>
  </div>
<% end %>